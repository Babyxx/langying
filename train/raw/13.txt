 Intrusion Detection Based on Neuro-Fuzzy ClassificationAbstractComputer security is far from guaranteed due to the scalability of computer networks the constant evolution of risks and the presence of noisy information. Several solutions were proposed to ensure the integrity, confidentiality and availability of resources, including intrusion detection systems (IDS). The main objective of the current work is first to take advantage of data mining techniques such as normalization, feature selection and eliminating redundancies in order to analyze the huge data like the KDDCUP’99. Second, the learning ability of neural networks and third the fuzzy logic reasoning that realizes knowledge wave characters. The proposed model is the Neuro-Fuzzy model precisely the NEFCLASS (Neuro Fuzzy Classification) model of a generic fuzzy perceptron which is in the form of a combination of neuron and fuzzy system networks. This model is characterized by its powerfulness thanks to its large database and rapidity due to its parallel architecture. Moreover, it can be easily updated through the re-learning process following the scalability potential inherited in its architecture. As well as it is distinguished by an intuitive model presented by linguistic rules that are easily understood by the security operator. To test out the adaptability of our approach in detecting unknown attacks we use a test database , namely corrected test that contains new attacks that are not present in the training set and compare the results obtained by the model ANFIS. We prove that our approach based on NEFCLASSmodel is more powerful in classifying intrusions than the one based on ANFIS model. To highlight the motivation for using the Neuro-Fuzzy Classifier, a comparative study was conducted by using the full 10% KDD among the NEFCLASS model and other supervised classifiers which are ANN and C5.0.1 IntroductionThe connectivity of computer networks is rapidly increasing giving rise to greater risks. Julish [1] stated that 99% of generated alerts are false alarms (i.e. false positive: an alert is triggered following a legitimate action that is identified as an intrusion). This is due to the redundant nature alerts saved in the log file and this can distort computer system security by Concealing the generation of true positives (real intrusion is identified). To further simplify the analysis task for security operators, it should be pointed out that the objective behind automate alert analysis phases is to ease the huge number of alerts generated and improve the semantics of these alerts to build a high alert level. Several solutions have been identified to safeguard the security of computer systems including the intrusion detection systems (IDS) whose role is to detect intrusion attempts. The large amount of information contained in the IDS produces many redundant alerts because it lacks different specifics (The information contained lack specifics which can lead to many false alarms). The presence of imperfect information greatly influences the response data using IDS tools under non-suitable as a medium for decision-making. Uncertainty is presented as imperfect data, the variability of the data that resides in the random nature of the information due to the heterogeneity of data
 sources, vagueness and incompleteness of data due to the lack of useful data.The IDS mechanism has several challenges among which we may mention the reduced time response which allows us to predict the attacks in real time, the robustness of the model and its large bases to solve complex problems as well as its maintenance access. Data mining is currently a patrimony of promising research which aims at exploiting the large amounts of data collected every day. This multidisciplinary field is located at the junction of artificial intelligence (including machine learning), statistics, and database.Several IDS based on the paradigm of data mining have been proposed: among which we distinguish the IDS based on clustering technology [2] [3] and the IDS based on classification technique [4] [5] [6] [7] [8]. Today, we can state that the IDS can be seen as classification problems: several classification models have been proposed: IDS based on neural networks [5][9] are to direct the monitoring of user behaviour, probabilistic IDS based on Bayesian networks [10], [11] to build dynamic profiles, IDS based on new decision tree technique c5.0 which is considered very useful to handle missing data and a large amount of data [9]. We also distinguish IDS which is totally distributed according to the functioning on their biological systems that are built upon the natural selection of a population for genetic algorithms [7] and on the immune system of living beings for immunological approaches [8].Recently, hybrid approaches like the neural fuzzy [6][12], genetic fuzzy [13] and Hybrid decision tree-SVM[14] have shown promising results in detection intrusion. This is a consistent architecture that combines the clarity and flexibility of fuzzy logic and decision tree and the learning ability of the SVM, genetic algorithm and neural network.The choice of learning algorithm is important to decrease data uncertainty and to reduce the huge number of alerts. The purpose of learning is to produce a classification task which uses the model of supervised learning which consists of regrouping alerts in meta-alerts. This allows us to automatically create rules from the examples that are considered as training data. This model is run on other types of data: test data to classify new examples. This phase is meant to generalize at best the function to approximate.2 Neuro-Fuzzy ClassificationWe propose to utilise the model NEFCLASS [15], which is in the form of neural network and fuzzy combination system. This hybridization brings privileges for intrusion classification problem solution: the ability to learn neural networks and fuzzy logic reasoning that realizes the knowledge of vague characters. The fuzzy classification model is represented as linguistic rules which are easy to interpret by the user.The system NEFCLASS used for data analysis is a fuzzy perceptron model that is similar to conventional multi-layer perceptron, except that the weights are modelled by fuzzy sets. Activations, outputs, and propagation functions will also be changed. This architecture can be seen as a neural network, where in each layer is a component of a fuzzy system. To describe the architecture and operation of the proposed system, we consider Figure 1 which shows the internal structure of the proposed fuzzy perceptron with 2 inputs, 2 outputs and 5 rules. It consists of three main layers: it is simple to implement, it avoids the defuzzification step which gives a higher classification speed. The first layer represents the system inputs: itdefines the Membership Functions (MF); the fuzzy sets are encoded as fuzzy connection weights. The second hidden layer represents fuzzy rules that can be interpreted as a vague prototype of the data from which the fuzzy classifier was created from. The third layer represents the output of the system: it is considered as one unit per class.The system used in our approach is Mamdani which is considered as a Fuzzy Inference System using MIN-MAX for T-norms and T-conorm as activation functions, respectively (see Figure 2). The first stage consists of the step of Fuzzification used to determine the degrees of membership of the input variables, x and y corresponding to the fuzzy sets. The rule evaluation step comprises applying to the antecedents of the fuzzy rules in the case of multiple antecedents for one rule, the fuzzy operator AND typically the intersection operation transited by MIN AB(x) = min [A(x), B(x)] is used to obtain the final conclusion.
 Each result is then associated with the corresponding membership function result. The next step is to evaluate the fuzzy rules to correlate the evaluation of history with the result. The third step is to unify the results of all the rules by aggregating all substantial memberships featuring a composite fuzzy set using fuzzy implication described by the fuzzy OR operator. Typically the operation resulted in a union MAX AB(x) = max [A(x), B(x)]. The last step is used to convert all linguistic values obtained in the third step into a unique number using several methods such as (calculation of center of gravity, Neural Networks, etc.)The learning of Neuro-Fuzzy systems is used to determine or change system settings in order to adopt a desired behaviour. The refinement of these parameters can be seen as an optimization problem of neural networks. Adjustments are then made to the various system parameters (weights, thresholds, rules, MF, etc.). The system can be built with basic initial rules defined a priori and will be then refined during the learning phase, or it may start with a base of empty rules that will be filled from the training data.Figure 1. NEFCLASS Structure [15]Figure 2. The Mamdani Fuzzy Inference System using Min-Max Method [16]The learning of rules has two important cycles: in the first cycle, a combination of fuzzy sets is defined with degrees of membership. These setsare distincts for each input and output and result in a combined antecedent. If it does not exist in the basic rules, it will be added. In the second cycle the rules are completed by choosing the best consistent. The assignment of weights to the different rules changes according to the priority of the importance of rules and measurement of their performance in the classification. Selection is used to reduce the size of the basis of candidate rules. For learning the membership functions, a simple retro spread will be adopted. Each rule alters its membership functions by changing their degree of membership. The process is to calculate the activation of neurons in front of the different layers, the error is then propagated retro in reverse activation to calculate each neuron’s contribution.Algorithm 1 and 2 show the pseudo-code of structure learning and parameters learning, respectively. We consider, as an example, the triangular membership function which is regarded as a special case of the trapezoidal shape. Figure 3 displays the variation of the degrees of membership of the two forms.The model is:n input unitsK=0,i.e. bases empty rulesm output units represents intrusionsS forms training(each form consists of a relevant vector of entry pand a desired output vector (Class alerts) t )Class alerts is represented in the form of n successive numbers that are either 0 or 1, affects 1 in the attack occurred        For each form (p, t) do beginFor each input   do find   =Create the antecedent A= ({(p)}; ......   );   If (A   list of antecedent)then Add A in the list of history.end; end;For any form (p, t) do beginFor each A   list of antecedent do [Classe(p)] =   [classe(p)] + A(p) 
  end; end;For any form (p, t) do beginFor each A   list of antecedent do [Classe(p)] =   [classe(p)] + A(p)end; end;For each A   list of antecedent do beginj={}Create a rule R with the antecedent A and consequentAdd R in the candidate rule base and connect to the output-Algorithm1. Rule Learning algorithmrepeatpropagate the next form (p, t) of the τ it byNEFCLASSFor each output unit   , determine the delta value=–For each rule unit R with   > 0beginDetermine the delta value= Find   such thatW(,R)( = {W(x,R)   }For the fuzzy set W (   ,R)determine the delta values for its: Increase status: decrease statusFigure 3. Adaption of Triangular MF (to the left) and Trapezoidal MF (to the right).3 KDD Cup 99 Data SetNowadays, very little traffic traces are freely available to the scientific community, for obvious privacy reasons. In addition, public traces containing well-documented abnormalities are even rarer. Indeed, among the only public traces labelled, we found: PLACID (Probabilistic Models and graphical logics for alarm correlation in intrusion detection), DARPA'98 (Defense Advanced Research Projects Agency), DADDI (Dependable Anomaly Detection with Diagnosis). We used the KDD’99(KDD = Knowledge Discovery in Databases) exploited at the annual conference in the DARPA program as part of experiment a data. They contain traces of anomalies that documented 90% of normal connections and 10% of intrusion type connections or attacks. Each record or connection codes a data flow between a source and a destination with a given protocol (TCP, UDP ...), and each connection contains 41 attributes. The data set comprise four classes, namely [17]: Probe: This acquires crucial information to conduct a more scalable attack later, e.g., port sweep. Dos (Denial of Service): This is to prevent by all means, the users accessing the resources available in time, e.g., smurf. R2L (Root to Local): This is to have unauthorized access from a remote machine, e.g., imap. U2R (User to Root): This is to have unauthorized access as local super-In user, e.g., buffer overflow.KDD dataset is divided into the following record sets: data labelled for the training phase and data unlabelled for the test phase. The total number of connection records in the training         end;         parameters   ,   , using the learning rateof the fuzzy set μ > 0    sgn( - ) =-+,+ Apply the changes to W (   ,R)end;Algorithm 2. Fuzzy Set Learning algorithm     
 4data set is too large, at about 5000000 records. We used just 10% of this data.Proposed Methodmaximum information gain, most of the features have information gain ratio (IGR) over 0.6[19][21].The purpose of eliminating no-useful attributes is to achieve a classification suitable for the evaluation of IDS and subsequently bring about a better performance by the system.Figure 4. Selection of relevant attributes based on Information GainFigure 5. Selection of relevant attributes bases on Gini IndexEliminating redundancies: One of the most significant deficiencies in the KDD data set is the huge number of redundant records, which causes the learning algorithms to be biased towards the frequent records, and thus prevent them from learning infrequent records which are usually more harmful to networks such as U2R and R2L attacks. In addition, the existence of these repeated records in the test set will cause the evaluation results to be biased by the methods which have superior detection rates on the frequent records [20]. This issue was solved by removing all the repeated records in the entire KDD training and test set, and retaining only one copy of each record. The following charts (see Figure 6 and Figure 7) illustrate the statistics of the reduction of repeated records in the KDD training and test sets, respectively.Classification includes three main process: Model Design: comprises Data preprocessingimplies to transform raw data into an understandable format and Fuzzification inputs implies to transform crisp values into grades of membership for linguistic terms of fuzzy sets. Classifier Structure : Consists of two process which are training parameters ( Training Fuzzy Sets) and training structure ( Training Rules). To evaluate the classifier obtained we used certain measures which are error rate and confidence intervals Test of classifier : To check the classifier's generalization ability, the classifier performs on unseen data characterized the test data. Some performance measures are used to assessing the classifier performance.4.1 PreprocessingNormalization: Some attributes are of a discrete type (assuming a finite number of values), while others are of the order of   and others of continuous type. In order to become adaptable to the Neuro-Fuzzy model, a normalization step is necessary. The normalization is effected by the following function:     The original value of the attributeThe minimum value of all possible values of the attributeThe maximum value of all possible values of the attribute   The normalized value ∈ [0,1]Selection Feature: We selected among the connection data only those that are considered most relevant. We processed the data selection problem by applying AFCM analysis (Factorial Multiple Correspondence Analysis) based on the calculation of GINI indexes (when the GINI index increases, the relevance of attribute increases) [18]. We used just 9 relevant attributes. We also propose to use the first 9 relevant attributes based on the
     Number of Input    9   Number of Output      9   Form of Membership Functions  Trapezoidal Function   Fuzzy Inference System      Mamdani   Generation of Fuzzy Inference System  Grid Partitioning   T-Norme/T-Conorme      Min/Max   Parameters Learning  Back-propagation (simple heuristics)+ least square   Structure learning     Best RulesFigure 6. Statistics of redundancy in the KDD Train set Figure 7. Statistics of redundancy in the KDD Test4.2 Classifier StructureThe amelioration of learning Neuro-Flou parameters is related to several factors, including: the number of forms of learning, the number of hidden layers, the activation function, choice of basic tests (empty or not), and algorithms learning. All the Membership Functions input stands for the trapezoidal functions with 5 fuzzy sets. The inference mechanism used is of type Mamdani fuzzy. Fuzzy intersection (T-norms) and fuzzy union (T-conorms) are used as activation functions. The following table summarizes the characteristic of the model NEFCLASS. We apply two types of selection method: the first is based on the Information Gain (IG) and the second on the Gini Index (GI).We use the model NEFCLASS in two forms of Binary (B-NFC) and Multi- classifier (M-NFC) to classify into normal and suspicious or intrusive activity. In binary classification, the classifier model has been trained with training dataset labelled to one of the two classes, 0 for normal and 1 for attack. Unlike the binary classifier, attacks in the training dataset for multi-classifier may be categorized into five classes, 0 for normal, 1 for Dos, 2 for R2L, 3 for U2R, and 4 for Probe.Table 1: Characteristic of approach4.3 Evaluation classifierModel evaluation is an integral part of the model development process. It helps to find the best model that represents our data and how well the chosen model will work in the future. We used the technique of Cross-Validation, we divided the data into K subsets of equal size, we built models K times, each time omitting one of the subsets from training and uses this as the test set. If K equals the sample size, this is called “leave-one-out”. We adopt a retro propagation algorithm in combination with a least squares estimation to evaluate our model. This technique helps to better understand how the Neuro-Fuzzy model works. Its purpose is to reduce some error measure defined by the sum of squared differences between actual and desired results. We have conducted to construct the final model that should be attached with the complete set of learning and which aims to classify each observation in the test set. we selected 48840 random points from the subset of 10% of data used as training dataset and 4884 records of data which do not overlap with training set dataset, selected as the checking data (used for validating the model) for both the binary and multi-classifiers.To estimate the number of misclassifications per pattern for unseen data in order to account for the validity of the classifier, we used the following measures : a Mean of Error (ME) of 10 error values obtained , a Standard Deviation (SD) and a Confidence Interval (CI) as precision indicators for the results obtained. Furthermore , we fixed the number of rules (NR) to determine the complexity
   Classifier     SM     CI   B-NFC     GI 0.028737 +/- 0.002082    IG     0.030166 +/- 0.008737   M-NFC    GI 0.022632 +/- 0.001714    IG   0.026146 +/- 0.001810 of classifier. Usually the number of rules is less than min { | , where |   is the cardinality of training data set and is the number of fuzzy set provided for each variable   . Table 2 and Table 3 show the performance on training data of each category of classifier.To evaluate the classifier we relied on the following measures: Detection Rate (DR) is defined as the number of examples correctly classified by our system, False Positive Rate(FP). Certain patterns will not be classified (UP) if the degrees of membership of different classes are very similar, or if none of the degrees of membership exceeds a certain threshold. Results indicate that NEFCLASS is more appropriate as a M-NFC than as a B-NFC. It has got high DR which can reach 97.71% , less FP about 0.26% and UP about 0.77% for GI method. The form of B- NFC has got high DR which can reach 97.08%, FP about 0.7% and UP about 1.1% for GI method and has got the least FP about 0.27% and UP about 2.08% for IG method. Classifiers that use the GI method are considered the best because they have the smallest number of errors between targets and outputs. We notice that accuracy is higher with a lot of rules.Table 3: Confidence Interval of each category of classifier and method selection4.4 Test of classifierFollowing the trained network, the final values of network parameters are obtained. An evaluation step is necessary; the objective of this phase is to verify the adequacy of the behaviour predicted by the model and the reality of the modelled-system. This is meant to confirm the generalization of the model with respect to the training set, using new test data known as “corrected KDD”. This data includes 14 new types of attack. We used 50000 records of “corrected KDD” to evaluate our classifiers. It's important to point that a little existing method of comparison in the quoted reference used this nature of data. Among the works, we mentioned this approach [6] which uses ANFIS (Adaptive Neuro-Fuzzy Inference System) that is functionally equivalent to the Sugeno Fuzzy Inference Systems for building their IDS. The key objective of this work is to utilize ANFIS (Adaptive Neuro Fuzzy Inference System) as a classifier to detect intrusions in computer networks. Similar to what has been done, the performance of ANFIS has been evaluated in relation to two forms: Binary and multi-classifier and they have used the KDD Cup 99 intrusion detection dataset.The model ANFIS implements backpropagation by gradient descent as Parameters Learning (PL), while in the model NEFCLASS, the fuzzy sets are trained by backpropagation, used for a better suited procedure (simple heuristics) to fuzzy operators of Mamdani System. In our case, we did not use the adaptive rule weights in order to keep semantics of a NEFCLASS System. In [22], it is reported that rule weights do not necessarily serve to obtain good classification. Moreover, each rule unit is connected to only one output unit so it does not necessarily compute the sum of errors of rules. To fix the size of rule base, we determine     Classifier     SM    NR   ME   SD B-NFC       GI      383     0.028737     0.002421   IG  273 0.030166 0.010159 M-NFC       GI      383     0.022632     0.002105   IG    273   0.026146   0.002660  Table 2: Performance on Training Data of each category of classifier
 automatically the number of rules in order to increase the accuracy of classifier. To increase the interpretability, we proceed to select just the best among all the rules (by deleting the classes represented by weak rules). Contrary to NEFCLASS model the interpretability is not ensured by the model ANFIS because the consequence of rule is a functional independence. In the other hand, NEFCLASS is considered as faster than ANFIS because Defuzzification step is not followed. Table 4 prove performance's comparison of the aforementioned approaches.Table 4: Comparison of performance of model NEFCLASS and ANFIS4.5 Classifier Performance ComparisonA good classification is distinguished by a reduced response time, good detection, and a low false alarm rate. An evaluation based on the measurement of performance, such as: True Positive Rate (TP), False Alarm Rate (FP), Percentage of Successful Prediction (PSP), and Training Time (TT), to show the results were conducted in this survey [21]. The results show that it is difficult or impossible to achieve these three criteria at the same time. This survey showed that Fuzzy logic (FL) is superior to Multi-Layer Perceptron (MLP) in respect to classifying Probe, R2L and U2R with 98.4% ,92.1%, 69.6% respectively, but it takes more time to provide the results than MLP with accuracy of 94.8%. DOS attacks have the highest TP rates with MLP which generate the lowest false alarm of all types of attacks than FL algorithm and MLP algorithm had higher training times than other algorithm of data mining which are mentioned in this survey [21]. We reviewed in this section two supervised classification approaches namely C5.0 and ANN in addition to the classifier NEFCLASS. We used the following performance measurement : the Accuracy (DR), The sensitivity (TP) and the specificity (TN). we used the whole of 10% KDD99 data and evaluate each detector by usingthe same test data ( almost 10% of training data). The results show that the NEFCLASS produces good accuracy with 99.88% and it generates a low false positive rate with 0% . Otherwise, C5.0 getting higher accuracy in classification with 99.95% but it generates a higher false positive rate than NEFCLASS with 0.03%. ANN achieves the lowest accuracy and the higher false positive rate compare to C5.0 and NEFCLASS classifiers with 99.40% as detection rate and 0.25% as a false positive rate.To determine a better method to identify each type of four attacks. The NEFCLASS classifier is considered superior to C5.0 and ANN in respect to classifying the attacks DOS, U2R Probe with 100% for DOS and U2R and 99.75% for Probe. However, R2L attacks have been identified well by using C5.0 method with 99.12%. To predict attacks in real time, We used the feature selection to realize a performance optimization of detection rules in order to minimize the complexity of classifier rules ranging from 3220 rules created to 408 rules created. The results of features reduced is shown in table 5. Although we made use of just 9 relevant attributes, the NEFCLASS model achieves a good detection accuracy with 99.49% compared to ANN and C5.0 classifier which used 32 relevant features.Table 5: Characteristic of approachTo promote a better evaluation of each classifier, we adopted ROC graphs and the measure AUC (Area Under the Curve) which is considered a good metric in comparing detectors together. Generally AUC is always ranked between 0.5(random classifier) and 1.0 ( Perfect classifier: there is a threshold value that can achieve a perfect separation between the classes). For calculate multi-class AUC "Total AUC" we calculated the average of AUC of each class. We plotted TP(sensitivity) against FP(1-specificty) for each threshold or decision cutoff used. Whenever sensitivity goes up, specificity goes down. The figure 8 shows the shape of each ROC. we notice   Model     Classifier     FP(%)   DR(%) ANFIS[6]     B-NFC       0.3      89.43   M-NFC  3.4 91.14   NEFCLASS+GI       B-NFC       0. 1      96.70   M-NFC    0.11    95.38    Classifier      FS(%)      DR(%)   ANN[9]   32    99.49   C5.0[9]  32 99.99  NEFCLASS+ GI      9      99.49  
 that the classifier NEFCLASS always outperforms Referencesthe other classifiers. He has the best ROC curve with AUC =1. The optimized model of NEFCLASS + GI is considered as a good classifier with AUC = 0.992. It closer to the accuracy of C5.0 with AUC =0.999 and has higher accuracy than ANN which has AUC= 0.984.[1] Julish. K. and Dacier. M. 2002. Mining Intrusion Detection Alarms for Actionable Knowledge. Proceedings of Knowledge Discovery in Data and Data Mining SIGKDD ’02. Edmonton, Alberta, Canada.[2] Wang. G, Hao. J, Ma, J. and Huang. L. September 2010. A new approach to intrusion detection using Artificial Neural Networks and fuzzy clustering. Journal of Expert Systems with Applications, volume 37: 6225-6232.[3] Sathyabama.S,IrfanAhmed.M.andSaravanan.A. September 2011. Network Intrusion Detection Using Clustering: A Data Mining Approach. International Journal of Computer Application, (0975-8887), volume 30, no. 4, 14-17.[4] Shanmugavadivu. R. and Nagarajan. N. 2011. Network Intrusion Detection System Using Fuzzy Logic. Indian Journal of Computer Science and Engineering (IJCSE), vol. 2 no. 1, 101-111.[5] Debar.H.Becker.M.andSiboni.D.1992.Aneural network component for an intrusion detection system. Proceedings of the 1992 IEEE Symposium on Security and Privacy. London.[6] Nadjaran Toosi. A, Kahani.M. and Monsefi. R. 2007.Network Intrusion Detection Based on Neuro- Fuzzy Classification. International Conference on Computing & Informatics, 2006. ICOCI '06. Kuala Lumpur.[7] Hoque M.S, Mukit. M.A. and Bikas. A.N. March 2012. An implementation of intrusion detection System using Genetic Algorithm. International Journal of Network Security & Its Applications (IJNSA), volume 4, No.2, 109–120.[8] Zekri. M. and Meslati. L.S. 2014. Immunological Approach for Intrusion Detection. ARIMA Journal , volume 17, 221–240.[9] Soni. P. and Sharma. P. July 2014 . An Intrusion Detection System Based on KDD-99 Data using Data Mining Techniques and Feature Selection. International Journal of Soft Computing and Engineering (IJSCE). vol .4, 112-118.[10] Taiba.K. and Leary.P. 2010. Approches basées sur les réseaux Bayésiens pour la prédiction d’attaques sévères. 5èmes Journées Francophones sur les Réseaux Bayésiens (JFRB2010), Nantes, France.[11] Benferhat. S, Kenaza. T. and Mokhtari. A. 2008. Réseaux Bayésiens naïfs pour la détection des attaques coordonnées. Journées Francophone sur les Réseaux Bayésiens, Lyon : France.[12] Raut.A.S.and Singh, K.R. July 2014. Adaptative Neuro-Fuzzy Inference System for anomaly-based intrusion detection. International Journal of Research in Engineering and Applied Sciences, volume 02, 27-36. Figure 8. ROC curve5 ConclusionWe have shown that the Neuro-Fuzzy model is highly efficacious for the reduction of false alarms and for its higher accuracy rate in comparison with other models. The trade-off between high performance and good interpretation is difficult and even impossible: Data selection is a very important asset to improve the results of our classification. In fact, our solution is understandable via the security operator with the Mamdani fuzzy inference system which allows us to provide linguistic rules. The task of classification is critical because it may discriminate the mischievous activities of legitimate activities. In the case of true positive; each type of intrusion is presented by a single copy to determine the level of attack that is carried out in several steps. Although the proposed method works well in the detection of intrusions of KDD’99, we must optimize the Neuro-Fuzzy model equally to its parameters (MF) in order to start the system, with a strong rules-based foundation and propose a method to explicitly correlate alerts to predict all potential plans by reducing system latency to active the anti-intrusion stage in time.
 [13] Jongsuebsuk.P, Wattanapongsakor. N. and Charnsripinyo. C. May 2013. Real-time intrusion detection with fuzzy genetic algorithm. 10th International Conference on Electrical Engineering/Electronics, Computer, Telecommunications and Information Technology (ECTI-CON), Krabi.[14]Golmah.V. 2014. An Efficient Hybrid Intrusion Detection System based on C5.0 and SVM. International journal of Database Theory and Application, volume 7, No.2: 59-70.[15]Nauck.D. and Kruse. R. 1999.Obtaining interpretable fuzzy classification rules from medical data. Artificial Intelligence in Medicine.[16]Jang. J.S.R, Sun. C.T. and Mizutani. E. September 1996.Neuro-Fuzzy and soft computing, a Book, 1st ed.[17]KDD Cup 1999 Intrusion detection dataset: The UCI KDD Archive Information and Computer Science, University of California, Irvine. DOI= http://kdd.ics.uci.edu/databases/kddcup99/[18] Jemili. F, Zaghdoud. M. and Ben Ahmed. M. 2009. Intrusion Detection based on Hybrid Propagation in Bayesian Networks. In Proceedings of the IEEE International Conference on Intelligence and security informatics.[19]Wei. W, Gombault. S. and Guyet. T. 2008. Towards Fast Detecting Intrusions: Using Key Attributes of Traffic. The Third International Conference on Internet Monitoring and Protection, 2008. ICIMP ‘08, volume 13: 86-91, Bucharest.[20]Mahbod. T, Bagheri. E, Wei. L. and Ghorbani. A. A. 2009. A Detailed Analysis of the KDD CUP 99 Data Set. IEEE Symposium on Computational Intelligence for Security and Defense Applications. CISDA 2009: 1-6, Ottawa.[21] Al-mamory. S.O. and Jassim, F. S.2013. Evaluation of Different Data Mining Algorithms with KDD CUP 99 Data Set, Journal of Babylon University/Pure and Applied Sciences, No(8)/ volume 21.[22]D. Nauck,F. Klawonn, and R.Kruse. September 1997. Foundations of Neuro-Fuzzy Systems, a book, 1st ed, Wiley, Chichester.